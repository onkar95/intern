
router.post('/register', async (req, res) => {
    const { name, email, password } = req.body
    try {
        let user = await User.findOne({ email } )
        if (user) {
            return res.status(400).json({ error: 'user already exist' })
        }
        let empty =await User.email
        const hashed_password = await bcrypt.hash(password, 10)
        user = new User({
            name,
            email,
            password: hashed_password,
        });
        await user.save();
        return res.status(201).json({ message: "user created sucessfuly" })
    } catch (err) {
        return res.status(400).json({ error: err.message });

    }
})

router.post('/login', async (req, res) => {

    const { email, password } = req.body;
    try {
        let user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ error: "user doesnot exit" })
        }
        const isMatch = await bcrypt.compare(password, user.password)
        if (!isMatch) {
            return res.status(400).json({ error: 'invalid creaditentiol' })
        }
        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
            expiresIn: '1h',
        });
        return res.status(200).json({
            token,
            user: {
              _id: user._id,
              name: user.name,
              email: user.email,
            },
          });
          } catch (error) {
            return res.status(400).json({ error: error.message });
        }

})


router.get('/', requireLogin , async (req, res) => {
    // console.log(req.user);
    try {
        const user = await User.findById(req.user._id).select("-password -__v");
        res.json(user);

    } catch (error) {
        return res.status(400).json({ error: error.message });
    }
})

router.get('/get', (req, res) => {
    User.find( (err, data) => {
        if (err) {
            res.status(500).send(err)
        } else {
            data.sort((b, a) => {
                return a.timestamp - b.timestamp;
            })
            res.status(200).send(data)
        }
    })})
